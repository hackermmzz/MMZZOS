#ifndef MMZZ_KEYBOARD_H
#define MMZZ_KEYBOARD_H
#include "../lib/kernel/io.h"
#include "../lib/kernel/ioqueue.h"
#include "../lib/kernel/print.h"
////////////////////////////////
#define KBD_PORT 0x60
#define KeyBoardQueueMaxCnt 56
///////////////////////////////
extern struct ioQueue KeyboardQueue;
///////////////////////////////
enum KEYBOARDCODE{
    CODE_ESC_DOWN,
    CODE_ESC_UP,   
    CODE_BACKSPACE_DOWN,
    CODE_BACKSPACE_UP,
    CODE_TAB_DOWN,
    CODE_TAB_UP,
    CODE_CAPS_LOCK_DOWN,
    CODE_CAPS_LOCK_UP,
    CODE_ENTER_DOWN,
    CODE_ENTER_UP,
    CODE_SHIFT_DOWN,
    CODE_SHIFT_UP, 
    CODE_CTRL_DOWN,
    CODE_CTRL_UP,
    CODE_LEFT_DOWN,
    CODE_LEFT_UP,
    CODE_RIGHT_DOWN,
    CODE_RIGHT_UP,
    CODE_UP_DOWN,
    CODE_UP_UP,
    CODE_DOWN_DOWN,
    CODE_DOWN_UP,
    //////////////////////////////////以下为可显示的字符
    /*0~9*/
    CODE_0_DOWN,//0
    CODE_1_DOWN,//1
    CODE_2_DOWN,//2
    CODE_3_DOWN,//3
    CODE_4_DOWN,//4
    CODE_5_DOWN,//5
    CODE_6_DOWN,//6
    CODE_7_DOWN,//7
    CODE_8_DOWN,//8
    CODE_9_DOWN,//9
    CODE_0_UP,
    CODE_1_UP,
    CODE_2_UP,
    CODE_3_UP,
    CODE_4_UP,
    CODE_5_UP,
    CODE_6_UP,
    CODE_7_UP,
    CODE_8_UP,
    CODE_9_UP,
    /*A~Z*/
    CODE_A_DOWN,//A
    CODE_B_DOWN,//B
    CODE_C_DOWN,//C
    CODE_D_DOWN,//D
    CODE_E_DOWN,//E
    CODE_F_DOWN,//F
    CODE_G_DOWN,//G
    CODE_H_DOWN,//H
    CODE_I_DOWN,//I
    CODE_J_DOWN,//J
    CODE_K_DOWN,//K
    CODE_L_DOWN,//L
    CODE_M_DOWN,//M
    CODE_N_DOWN,//N
    CODE_O_DOWN,//O
    CODE_P_DOWN,//P
    CODE_Q_DOWN,//Q
    CODE_R_DOWN,//R
    CODE_S_DOWN,//S
    CODE_T_DOWN,//T
    CODE_U_DOWN,//U
    CODE_V_DOWN,//V
    CODE_W_DOWN,//W
    CODE_X_DOWN,//X
    CODE_Y_DOWN,//Y
    CODE_Z_DOWN,//Z

    CODE_A_UP,
    CODE_B_UP,
    CODE_C_UP,
    CODE_D_UP,
    CODE_E_UP,
    CODE_F_UP,
    CODE_G_UP,
    CODE_H_UP,
    CODE_I_UP,
    CODE_J_UP,
    CODE_K_UP,
    CODE_L_UP,
    CODE_M_UP,
    CODE_N_UP,
    CODE_O_UP,
    CODE_P_UP,
    CODE_Q_UP,
    CODE_R_UP,
    CODE_S_UP,
    CODE_T_UP,
    CODE_U_UP,
    CODE_V_UP,
    CODE_W_UP,
    CODE_X_UP,
    CODE_Y_UP,
    CODE_Z_UP,
    //空格
    CODE_SPACE_DOWN,//space
    CODE_SPACE_UP,
    //
    CODE_TILDE_DOWN,//~
    CODE_TILDE_UP,
    CODE_BACKTICK_DOWN,//`
    CODE_BACKTICK_UP,
    CODE_BANG_DOWN,//!
    CODE_BANG_UP,
    CODE_AT_DOWN,//@
    CODE_AT_UP,
    CODE_HASH_DOWN,//#
    CODE_HASH_UP,
    CODE_DOLLAR_DOWN,//$
    CODE_DOLLAR_UP,
    CODE_MOD_DOWN,//%
    CODE_MOD_UP,
    CODE_CARET_DOWN,//^
    CODE_CARET_UP,
    CODE_AND_DOWN,//&
    CODE_AND_UP,
    CODE_STAR_DOWN,//*
    CODE_STAR_UP,
    CODE_LEFT_PARENTHESIS_DOWN,//(
    CODE_LEFT_PARENTHESIS_UP,
    CODE_RIGHT_PARENTHESIS_DOWN,//)
    CODE_RIGHT_PARENTHESIS_UP,
    CODE_UNDERSCORE_DOWN,//_
    CODE_UNDERSCORE_UP,
    CODE_SUB_DOWN,//-
    CODE_SUB_UP,
    CODE_ADD_DOWN,//+
    CODE_ADD_UP,
    CODE_EQU_DOWN,//=
    CODE_EQU_UP,
    CODE_LEFT_CURLY_BRACE_DOWN,//{
    CODE_LEFT_CURLY_BRACE_UP,
    CODE_LEFT_SQUARE_BRACKET_DOWN,//[
    CODE_LEFT_SQUARE_BRACKET_UP,
    CODE_RIGHT_CURLY_BRACE_DOWN,//}
    CODE_RIGHT_CURLY_BRACE_UP,
    CODE_RIGHT_SQUARE_BRACKET_DOWN,//]
    CODE_RIGHT_SQUARE_BRACKET_UP,
    CODE_OR_DOWN,//|
    CODE_OR_UP,
    CODE_BACKSLASH_DOWN,/* \ */
    CODE_BACKSLASH_UP,
    CODE_COLON_DOWN,//:
    CODE_COLON_UP,
    CODE_SEMICOLON_DOWN,//;
    CODE_SEMICOLON_UP,
    CODE_DOUBLE_QUOTATION_DOWN,//"
    CODE_DOUBLE_QUOTATION_UP,
    CODE_SINGLE_QUOTATION_DOWN,//'
    CODE_SINGLE_QUOTATION_UP,
    CODE_COMMA_DOWN,//,
    CODE_COMMA_UP,
    CODE_LESS_DOWN,//<
    CODE_LESS_UP,
    CODE_DOT_DOWN,//.
    CODE_DOT_UP,
    CODE_GREAT_DOWN,//>
    CODE_GREAT_UP,
    CODE_QUESTION_DOWN,//?
    CODE_QUESTION_UP,
    CODE_FORWARD_SLASH_DOWN,// /
    CODE_FORWARD_SLASH_UP,
    ////组合按键
    CODE_CTRL_BEGIN,
    //
    CODE_CTRL_Z,
    CODE_CTRL_C,
    CODE_CTRL_L,
    CODE_CTRL_U,
    //
    CODE_CTRL_END,
};
////////////////////////////////
////////////////////////////////
void KeyBoardInit();
void keyboard_interrupt(uint8_t code);
uint8_t KeyBoardConvertTo(uint16_t code);
uint16_t KeyBoardFunction(uint16_t code0,uint16_t code1);//根据code0和code1返回对应的功能按键
uint16_t KeyBoardGet();//获取一个输入
void KeyBoardRead(void*buf,uint32_t cnt);//从键盘读取cnt个字符
bool IsFunctionKey(uint16_t key);//判断key是否是功能按键
///////////////////////////////
#endif